How to Contribute
=================

There are many ways you can contribute to SESEMI. A few of them are listed below:

* Add support for a new dataset.
* Add support for a new SSL method.
* Fix any outstanding bugs.
* Improve our testing or documentation.

The general process for making a contribution involves:

1. Finding or opening a relevant issue on GitHub.
2. Scoping out the contribution by communicating with the maintainers on the issue's page.
3. Developing your contribution.
4. Testing your contribution.
5. Documenting your contribution.
6. Opening up a PR to get feedback.
7. Revising the PR until acceptance.

We maintain a high standard for testing and documentation so we encourage users to
place a focus on those aspects of their contribution.

----------
Developing
----------

We recommend that you clone the SESEMI repository locally and use an editable install when
developing a contribution. Along with the standard dependencies, you'll also need to
install the development requirements from the root directory as follows:

.. code-block:: bash

    $ pip install -e '.[dev]'

-------
Testing
-------

Included in the development requirements is `pytest`. Once you have implemented your contribution,
you should make sure that you test it sufficiently. We keep track of test coverage using
a `.coverage` file. You will need to regenerate this file when you are done adding any necessary
unit tests by running the following from the repository root:

.. code-block:: bash

    $ pytest --cov sesemi tests

-----------
Documenting
-----------

Our documentation is hosted on readthedocs and is automatically generated from restructured text
files located under the `docs/source` directory. If you add a new method, you will need to include
a page documenting it as well. Your source code should also be documented using the Napoleon syntax
as our API reference is autogenerated from Python docstrings.

You can build our documentation locally to `localhost:8080` as follows:

.. code-block:: bash

    $ cd docs/
    $ pip install -r requirements.txt
    $ make html && python -m http.server --directory build/html/ 8080

