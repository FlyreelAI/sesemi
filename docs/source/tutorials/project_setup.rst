Setting Up a Standard Project
=============================

SESEMI is designed to be highly configurable while having a couple API boundaries.
This is done to reduce requirements for code changes to try out new ideas under a unified interface.
As such, most ML projects can use the following workspace setup to develop their models::

  /experiments       # Stores your code, configurations, data, metrics, and models.
    /data            # Any datasets you want to use. Symlink data directories as necessary.
    /runs            # Stores models and metrics generated by SESEMI.
    /configs         # Your custom Hydra configurations.
    /src             # Custom code with packages that you can instantiate from the configs.
      /package_a     #   If you don't use a setup.py file to install these packages
      /package_b     #   you can instead configure your PYTHONPATH to point here as well.
    setup.py         # An optional setup file to install the packages in editable mode.

Each of the subdirectories are described in more detail in the sections below.

---------
Data Root
---------

The built-in datasets in SESEMI each expect a root path that contains the source data.
Since using absolute paths to define these may be non-portable and inconvenient, we support
paths relative to a separate user-defined data root directory. The data root defaults to
`./data` but can be easily configured differently. As the built-in training configurations
are defined using relative paths for the datasets, they will work as out of the box by storing
or symlinking the different datasets under `./data`.

-------------
Run Artifacts
-------------

The run directory is a root path used to store the artifacts for each training job.
Using Hydra, we have configured a default pattern for each job shown below::

  ${run.dir}/${run.id}/${now:%Y%m%d_%H%M%S}

Though the run directory is by default `./runs`, it is user-configurable. The `run.id` is also
user-configurable while the the last component is a directive that generates the current datetime
string.

Runs include the full configuration file, checkpoints, and metrics. We use TensorBoard to keep track
of metrics though other logging systems are supported through PyTorch Lightning.

--------------------------
Custom Configuration Files
--------------------------

We provide a number of built-in configuration files for training baseline models.
These configurations are also factored out into different components for reusability.
For your use case you'll likely want to tailor an existing baseline by using a different
architecture, optimizer, data augmentation, etc.

Hydra supports functionality to "import" a default configuration file and then override specific parts.
This particular usage and more is described in additional detail in the next tutorial.

------------------
Custom Source Code
------------------

There are a couple common reasons for needing to write custom code with SESEMI.
You may want to inject one of the following:

* dataset
* augmentation
* feature backbone
* classification head
* loss head 

Hydra supports this via configuration by having users define the qualified path of
the object and any arguments needed to instantiate it. This feature makes it possible
to inject user-defined objects into various parts of SESEMI. How this is achieved
is elaborated in subsequent tutorials.